#! /usr/bin/perl

use strict;
use Mail::Vpostmail;
use Getopt::Std;

my $v = Mail::Vpostmail->new();

my $user = shift;
my @targets = @ARGV;

if ($#targets < 1){
	print STDERR usage();
	exit(1);
}

my $v = Mail::Vpostmail->new();

$v->setUser($user);
if($v->userExists()){
	print STDERR "Error: User $user already exists\n";
	exit(1);
}
my $domain;
if($user =~ /@(.+)$/){
	$domain = $1;
}else{
	print STDERR "User $user doesn't look like an email address\n";
	exit(1);
}

$v->setUser($user);
my $targets = join(', ', @targets);
$v->createAliasUser(
	target => $targets, 
	domain => $domain
);

if($v->userIsAlias){
	exit(0);
}else{
	print "Something's up, alias isn't there.\n";
	exit(1);
}



sub usage(){
	return <<EOF;

vaddaliasuser

Adds an alias user to the mail system.  

Usage:

  vaddaliasuser [user] [target] ([another target]...)

EOF
}

=pod

=head1 NAME

vaddaliasuser - add an alias user to the system

=head1 DESCRIPTION

This is part of Avi's collection of scripts to emulate vpopmail's scripts on a Postfix/MySQL system. 
Any feature-parity is purely coincidental.

=head1 SYNOPSIS

vaddaliasuser [alias user] [target user] [target user] ...

You may specify as many targets as you like, but any existing ones are overwritten; you should use vuserinfo to get
a list of the current ones and add those to the list.

=head1 EXAMPLES

Deliver all mail to user@example.net into the mailboxes of user2@example.net and user3@example.net:

 vaddaliasuser user@example.net user2@example.net user3@example.net

=head1 EXIT STATUS

Exits 0 on success, non-zero on failure. Useful error messages are used as a poor substitute for sensible exit statuses.

=head1 AUTHOR

Avi wrote this.

http://avi.co

http://github.com/BigRedS/vpostmail

