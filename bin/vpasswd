#! /usr/bin/perl

use strict;
use Mail::Vpostmail;
use Getopt::Std;

my $user = pop;
my %opt;
getopts('hgpv', \%opt);

# h show help
# g generate password
# p use supplied password
# v be verbose (username: and password: labels)
# b batch mode


if ($user eq '' || $user eq '-h' || exists($opt{h})){
        print "Error. I need a user as an argument\n";
	print &usage;
        exit 1;
}


my $v = Mail::Vpostmail->new(
	storeCleartextPassword => 0,
	);
$v->setUser($user);
if (!$v->userExists()){
	print "ERROR user $user doesn't exist\n";
	exit 1;
}

my $password;
if(exists($opt{p})){
	$password = $opt{p};
}elsif(exists($opt{g})){
	$password = `pwgen 10 1`;
	chomp $password;
}

while ($password eq ''){
	$password = &getPassword()
}
$v->changePassword($password);
if($opt{g}){
	unless ($opt{v}){
		print "$password\n";
	}
}
if ($opt{v}){
	print "Username: $user\nPassword: $password\n\n";
}


sub getPassword(){
	my $pass1;
	my $pass2;
	print "Enter password: ";
	system('stty','-echo');
	chop($pass1=<STDIN>);
	system('stty','echo');
	print "\nConfirm password: ";
	system('stty','-echo');
	chop($pass2=<STDIN>);
	system('stty','echo');

	if ($pass1 eq $pass2){
		print "\n";
		return $pass1;
	}else{
		print "\npasswords do not match, try again:\n";
		return;
	}
};

sub usage{

return <<EOF;

vpasswd

(re)sets the password of a user on the mail system.

Usage:

 vpasswd [options] [user]

Options:

  -h             show this help
  -g             generate a password, print to terminal
  -p [password]  reset to [password], don't prompt

EOF

}
