#! /usr/bin/perl

use strict;
use Mail::Postfixadmin;
use Getopt::Std;
my %opt;
getopts('lh', \%opt);

my $domain = pop;#
if(exists($opt{h})){
	print usage();
	exit 0;
}

my $v = Mail::Postfixadmin->new();

if ($domain eq ''){
	foreach($v->listDomains){
		$v->setDomain($_);
		if ($v->domainIsAlias){
			my $target = ($v->getAliasDomainTarget);
			print "$_\t(alias for $target)\n";
		}else{
			print "$_\n";
		}
	}
	exit 0;
}

my %info;
$v->setDomain($domain);
if ($v->domainExists){
	if ($v->domainIsAlias){
		$v->setDomain($v->getAliasDomainTarget);
	}
	if(exists($opt{l})){
		foreach($v->getUsers){
			print $_."\n";
		}
	}else{
		%info = $v->getDomainInfo();
		foreach(sort(keys(%info))){
			unless($_ =~ /^mailboxes$/){
				printf('%-14s%s', $_, $info{$_});
				print "\n";
			}
		}
	}
}else{
	print STDERR "Domain $domain not found\n";
	exit 1;
}


sub usage{
return <<EOF;
vdominfo

Usage: 
  vdominfo [options[ <domain>

Prints out info on a domain. No analogy with vpopmail's
vdominfo is attempted.

Options:
  -l   print a list of mailboxes rather than domain properties

EOF
}
=pod

=head1 NAME

vdominfo - get info for a domain

=head1 DESCRIPTION

This is part of Avi's collection of scripts to emulate vpopmail's 
scripts on a Postfix/MySQL system. 

Any feature-parity is purely coincidental.

=head1 SYNOPSIS

vdominfo [-l] domain.com

=head1 OPTIONS

  -l    list domain users, rather than domain properties

=head1 EXAMPLES

show properties of example.net:
 vdominfo example.net

show users of example.com:
 vdominfo -l example.com

=head1 EXIT STATUS

Exits 0 on success, non-zero on failure. Useful error messages are used 
as a poor substitute for sensible exit statuses.

=head1 AUTHOR

Avi wrote this.

http://avi.co

http://github.com/BigRedS/vpostmail

