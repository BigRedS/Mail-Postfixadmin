#! /usr/bin/perl

use Mail::Postfixadmin;
use strict;
use Getopt::Std;
use Data::Dumper;
my %opt;
my $user = pop;
getopts('hfgp:u:', \%opt);

# f = 'force'
# g = generate a password
# p = use supplied password



if(exists($opt{h})){
        print usage();
        exit 0; 
}

if ($user eq ''){
        print usage();
        exit 1;
}

my $v = Mail::Postfixadmin->new();
$v->setUser($user);
if($v->userExists()){
        print "Error: User $user already exists\n";
        exit 1;
}

my $domain;
if ($user =~ /\@(.+)$/){
	$domain = $1;
	$v->setDomain($domain);
	if ($v->domainIsAlias){
		unless (exists($opt{f})){ 
			my $oldDomain = $domain;
			$domain = $v->getAliasDomainTarget;
			$v->setDomain($domain); 
			$user =~ s/$oldDomain/$domain/;
			$v->setUser($user);			
#			print "Domain: $domain\nUser:$user\n";
#			exit 0;
		}
	}
	unless($v->domainExists){
		print STDERR "Domain $domain doesn't exist. Use -f to proceed anyway\n";
		exit(1) unless(exists($opt{f}))
	}
}else{
	print STDERR "user '$user' doesn't look like a complete email address. Use -f to proceed anyway\n";
	exit(1) unless(exists($opt{f}));
}

my $password;
if (exists($opt{g})){
	$password = `pwgen 10 1`;
	chomp $password;
}elsif(exists($opt{p})){
	$password = $opt{p};
}
while ($password eq ''){
	$password = &getPassword()
}

$v->createUser();
$v->changePassword($password);

if($v->userExists()){
	if (exists($opt{g})){
		print "Password: $password\n";
	}
	exit 0;
}else{
	print STDERR "something's up, tried to create the user but it doesn't exist\n";
	exit 1;
}


sub getPassword(){
	my $pass1;
	my $pass2;
	print "Enter password: ";
	system('stty','-echo');
	chop($pass1=<STDIN>);
	system('stty','echo');
	print "\nConfirm password: ";
	system('stty','-echo');
	chop($pass2=<STDIN>);
	system('stty','echo');

	if ($pass1 eq $pass2){
		print "\n";
		return $pass1;
	}else{
		print "\npasswords do not match, try again:\n";
		return;
	}
};
exit;

sub usage{
	return <<EOF;
vadduser

Adds a user to the mail system. Usage:

vadduser [options] <username> 

If the password is not supplied as an argument, it will be 
prompted for.

Options:

  -f             ignore most sanity checks
  -g             generate a password for the user (uses pwgen)
  -p <password>  use supplied password

-f allows you to:
  - add users to domains that don't exist
  - add users that don't look like email addresses
  - add users to an alias, rather than its target  

EOF
}

=pod

=head1 NAME

vadduser - add a user to the mailer

=head1 DESCRIPTION

This is part of Avi's collection of scripts to emulate vpopmail's 
scripts on a Postfix/MySQL system. 

Any feature-parity is purely coincidental.

=head1 SYNOPSIS

vadduser -g user@domain

=head1 OPTIONS

  -f       ignore most sanity checks   
  -g       generate a password
  -p text  set 'text' as the user's password

Currently, these raise errors unless -f is used:
  - add user to a domain that doesn't exist on the system
  - add users that don't look like email addresses
  - add users to an alias domain, rather than a target

-f doesn't *fix* any of these, it just doesn't bother to check and
goes ahead anyway.

=head1 EXAMPLES

Add a user with a randomly generated password:

  vadduser -g user@example.org

Add a user with a password of 'password':

  vadduser -p password user@example.org

Add a user with a username which doesn't look like an email address:

  vadduser -f username

=head1 EXIT STATUS

Exits 0 on success, non-zero on failure. Useful error messages are used 
as a poor substitute for sensible exit statuses.

=head1 AUTHOR

Avi wrote this.

http://avi.co

http://github.com/BigRedS/vpostmail
