#! /usr/bin/perl

use Mail::Postfixadmin;
use strict;
use Getopt::Std;
my %opt;
my $domain = pop;
getopts('vh', \%opt);


my $v = Mail::Postfixadmin->new();
my $version = $v->version;

if(exists($opt{h}) || $domain eq '-h' || $domain eq ''){
        print usage();
        exit 0; 
}


if ($domain eq ''){
	print usage("Domain is null");
	exit 1;
}

$v->setDomain($domain);
if($v->domainExists()){
	print STDERR "Domain $domain already configured\n";
	exit 1;
}
if($v->createDomain()){
	print $domain if(exists($opt{v}));
}else{
	print "Unknown Error creating domain $domain: $@";
}

exit;

sub usage{
	my $message = shift;
	my $return = "vdeldomain version $version";
	if($message){
		$return.="\n\nERROR: $message";
	}

return <<EOF;
$return

Adds a domain to the mail system. 

Usage:

  vadddomain <domain>

Returns 0 on success, 1 on any sort of failure
EOF
}

=pod

=head1 NAME

vadddomain - add a domain to the system

=head1 DESCRIPTION

This is part of Avi's collection of scripts to emulate vpopmail's scripts 
on a Postfix/MySQL system. 

Any feature-parity is purely coincidental.

=head1 SYNOPSIS

vadddomain [options] domain name

Options:
   -v    be verbose; print the name of the domain name when it's created.

=head1 EXAMPLES

add example.net:
 vadddomain example.net

=head1 EXIT STATUS

Exits 0 on success, 1 on any sort of failure. Useful error messages are 
used as a poor substitute for sensible exit statuses.

=head1 BUGS

There's currently no way to modify domains in this collection of scripts 
(though the module offers functions to do it). There's also no way to 
create domains with anything but defaults, so you'll have to make do with 
those for now.

=head1 AUTHOR

Avi wrote this.

http://avi.co

http://github.com/BigRedS/vpostmail

